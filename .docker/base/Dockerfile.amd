#
# STAGE 1: SERVER
#
FROM golang:1.20-bullseye as server
WORKDIR /src

# Install dependencies
RUN set -eux; apt-get update; \
    apt-get install -y --no-install-recommends \
        git cmake make libx11-dev libxrandr-dev libxtst-dev \
        libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
        gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly; \
    # Install libclipboard
    cd /tmp; \
    git clone --depth=1 https://github.com/jtanx/libclipboard; \
    cd libclipboard; \
    cmake .; \
    make -j$(nproc); \
    make install; \
    rm -rf /tmp/libclipboard; \
    # Clean up
    apt-get clean -y; \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/*

# Build server
COPY server/ .
RUN ./build

#
# STAGE 2: CLIENT
#
FROM node:18-bullseye-slim as client
WORKDIR /src

# Install dependencies
COPY client/package*.json ./
RUN npm install

# Build client
COPY client/ .
RUN npm run build

#
# STAGE 3: RUNTIME
#
FROM ubuntu:22.04

# Avoid warnings by switching to noninteractive
ENV DEBIAN_FRONTEND=noninteractive

# Set custom user
ARG USERNAME=neko
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN set -eux; \
    # Update and upgrade packages
    apt-get update && apt-get upgrade -y; \
    # Install dependencies
    apt-get install -y --no-install-recommends \
        wget \
        ca-certificates \
        supervisor \
        pulseaudio \
        dbus-x11 \
        xserver-xorg-core \
        xserver-xorg-video-amdgpu \
        libxcb1 \
        libxrandr2 \
        libxv1 \
        libopus0 \
        libvpx6 \
        mesa-va-drivers \
        vainfo \
        gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-plugins-ugly \
        gstreamer1.0-pulseaudio \
        gstreamer1.0-vaapi; \
    # Install fonts
    apt-get install -y --no-install-recommends \
        fonts-noto-color-emoji \
        fonts-takao-mincho \
        fonts-wqy-zenhei \
        xfonts-intl-chinese \
        xfonts-wqy \
        fonts-wqy-microhei; \
    # Create a non-root user
    groupadd --gid $USER_GID $USERNAME; \
    useradd --uid $USER_UID --gid $USER_GID --shell /bin/bash --create-home $USERNAME; \
    usermod -aG audio,video,render,pulse $USERNAME; \
    # Workaround for an X11 problem
    mkdir /tmp/.X11-unix; \
    chmod 1777 /tmp/.X11-unix; \
    chown $USERNAME /tmp/.X11-unix/; \
    # Make directories for neko
    mkdir -p /etc/neko /var/www /var/log/neko \
        /tmp/runtime-$USERNAME \
        /home/$USERNAME/.config/pulse \
        /home/$USERNAME/.local/share/xorg; \
    chmod 1777 /var/log/neko; \
    chown $USERNAME /var/log/neko/ /tmp/runtime-$USERNAME; \
    chown -R $USERNAME:$USERNAME /home/$USERNAME; \
    # Clean up
    apt-get clean -y; \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/*

# Copy config files
COPY .docker/base/dbus /usr/bin/dbus
COPY .docker/base/default.pa /etc/pulse/default.pa
COPY .docker/base/amd/supervisord.conf /etc/neko/supervisord.conf
COPY .docker/base/amd/entrypoint.sh /bin/entrypoint.sh
RUN chmod +x /bin/entrypoint.sh
COPY .docker/base/amd/add-render-group.sh /usr/bin/add-render-group.sh

# Set default envs
ENV USER=$USERNAME
ENV DISPLAY=:99.0
ENV PULSE_SERVER=unix:/tmp/pulseaudio.socket
ENV XDG_RUNTIME_DIR=/tmp/runtime-$USERNAME
ENV NEKO_PASSWORD=neko
ENV NEKO_PASSWORD_ADMIN=admin
ENV NEKO_BIND=:8080
ENV NEKO_HWENC=VAAPI
ENV RENDER_GID=

# Copy static files from previous stages
COPY --from=server /src/bin/neko /usr/bin/neko
COPY --from=client /src/dist/ /var/www

HEALTHCHECK --interval=10s --timeout=5s --retries=8 \
    CMD wget -O - http://localhost:${NEKO_BIND#*:}/health || exit 1

# Run neko
CMD ["/usr/bin/supervisord", "-c", "/etc/neko/supervisord.conf"]

ENTRYPOINT ["/bin/entrypoint.sh"]
